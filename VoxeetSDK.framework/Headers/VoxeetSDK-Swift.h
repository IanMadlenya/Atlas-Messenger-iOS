// Generated by Apple Swift version 3.1 (swiftlang-802.0.51 clang-802.0.41)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <VoxeetSDK/VoxeetSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSNumber (SWIFT_EXTENSION(VoxeetSDK))
@end


@interface NSNumber (SWIFT_EXTENSION(VoxeetSDK))
@end


@interface NSURLSession (SWIFT_EXTENSION(VoxeetSDK))
@end

@protocol VTConferenceDelegate;
@class MediaStream;

SWIFT_CLASS("_TtC9VoxeetSDK12VTConference")
@interface VTConference : NSObject
/// Conference delegate.
@property (nonatomic, weak) id <VTConferenceDelegate> _Nullable delegate;
@property (nonatomic, copy) void (^ _Nullable participantAdded)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nonnull, MediaStream * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable participantUpdated)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nonnull, MediaStream * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable participantRemoved)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable messageReceived)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nonnull, NSString * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable screenShareStarted)(NSString * _Nonnull, MediaStream * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable screenShareStopped)(NSString * _Nonnull);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (NSString * _Nullable)hasLiveConference SWIFT_WARN_UNUSED_RESULT;
@end


@interface VTConference (SWIFT_EXTENSION(VoxeetSDK)) <MediaAPIDelegate>
- (void)streamAddedForPeer:(NSString * _Nonnull)peerId withStream:(MediaStream * _Nonnull)mediaStream;
- (void)streamUpdatedForPeer:(NSString * _Null_unspecified)peerId withStream:(MediaStream * _Null_unspecified)mediaStream;
- (void)streamRemovedForPeer:(NSString * _Nonnull)peerId withStream:(MediaStream * _Nonnull)mediaStream;
- (void)screenShareStreamAddedForPeer:(NSString * _Nonnull)userID withStream:(MediaStream * _Nonnull)stream;
- (void)screenShareStreamRemovedForPeer:(NSString * _Nonnull)userID withStream:(MediaStream * _Nonnull)stream;
@end

@class VideoRenderer;

@interface VTConference (SWIFT_EXTENSION(VoxeetSDK))
/// Getting a specific user’s information.
///
/// returns:
/// Returns all information in a <code>Dictionary</code>.
- (NSDictionary<NSString *, id> * _Nonnull)getUserInfoWithUserID:(NSString * _Nonnull)userID SWIFT_WARN_UNUSED_RESULT;
/// Changing the user position.
/// \param userID User ID.
///
/// \param angle Changes the user position with an angle.
///
/// \param distance Changes the user position with a distance.
///
- (void)setUserPositionWithAngle:(double)angle distance:(double)distance userID:(NSString * _Nonnull)userID;
/// Changing the user position (with just an angle, see <code>setUserPosition(userID: String, angle: Double, distance: Double)</code>).
/// \param userID User ID.
///
/// \param angle Changes the user position with an angle.
///
- (void)setUserAngle:(double)angle userID:(NSString * _Nonnull)userID;
/// Changing the user position (with just a distance, see <code>setUserPosition(userID: String, angle: Double, distance: Double)</code>).
/// \param userID User ID.
///
/// \param distance Changes the user position with a distance.
///
- (void)setUserDistance:(double)distance userID:(NSString * _Nonnull)userID;
/// Muting / Unmuting a user.
/// \param mute Mute or unmute a user.
///
/// \param userID User ID.
///
- (void)muteUser:(BOOL)mute userID:(NSString * _Nonnull)userID;
/// Checking if a user is currently muted or not.
/// \param userID User ID.
///
///
/// returns:
/// Return a boolean that indicates if a user is currently muted.
- (BOOL)isUserMutedWithUserID:(NSString * _Nonnull)userID SWIFT_WARN_UNUSED_RESULT;
/// Switching between BuiltInSpeaker and BuildInReceiver.
- (void)switchDeviceSpeaker;
/// Switching between BuiltInSpeaker and BuildInReceiver.
/// \param forceBuiltInSpeaker Forces the audio to get set on the main speaker if <code>true</code>. If the value is <code>false</code> the buildInReceiver will be forced.
///
- (void)switchDeviceSpeakerWithForceBuiltInSpeaker:(BOOL)forceBuiltInSpeaker;
/// Attaching a media stream to a renderer.
/// \param stream Stream to be rendered into the view.
///
/// \param renderer The view renderer that will display the video.
///
- (void)attachMediaStream:(MediaStream * _Nonnull)stream renderer:(VideoRenderer * _Nonnull)renderer;
/// Unattaching a media stream to a renderer.
/// \param stream Stream to be rendered into the view.
///
/// \param renderer The view renderer that will display the video.
///
- (void)unattachMediaStream:(MediaStream * _Nullable)stream renderer:(VideoRenderer * _Nonnull)renderer;
/// Getting the participant’s voice level.
/// \param userID User ID.
///
- (double)getVoiceLevelWithUserID:(NSString * _Nonnull)userID SWIFT_WARN_UNUSED_RESULT;
/// Flipping the device camera (front/back).
- (void)flipCamera;
@end


@interface VTConference (SWIFT_EXTENSION(VoxeetSDK))
@end


SWIFT_PROTOCOL("_TtP9VoxeetSDK20VTConferenceDelegate_")
@protocol VTConferenceDelegate
@optional
- (void)participantAddedWithUserID:(NSString * _Nonnull)userID userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo stream:(MediaStream * _Nonnull)stream;
- (void)participantUpdatedWithUserID:(NSString * _Nonnull)userID userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo stream:(MediaStream * _Nonnull)stream;
- (void)participantRemovedWithUserID:(NSString * _Nonnull)userID userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo;
- (void)messageReceivedWithUserID:(NSString * _Nonnull)userID userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo message:(NSString * _Nonnull)message;
- (void)screenShareStartedWithUserID:(NSString * _Nonnull)userID stream:(MediaStream * _Nonnull)stream;
- (void)screenShareStoppedWithUserID:(NSString * _Nonnull)userID;
@end


SWIFT_CLASS("_TtC9VoxeetSDK9VoxeetSDK")
@interface VoxeetSDK : NSObject
/// Voxeet SDK singleton (has been renamed “shared”).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VoxeetSDK * _Nonnull sharedInstance;)
+ (VoxeetSDK * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Voxeet SDK singleton.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VoxeetSDK * _Nonnull shared;)
+ (VoxeetSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) VTConference * _Nonnull conference;
/// Enable or disable CallKit (default state: enable).
@property (nonatomic) BOOL enableCallKit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface VoxeetSDK (SWIFT_EXTENSION(VoxeetSDK))
@end

@class UIApplication;
@class UIUserNotificationSettings;
@class UILocalNotification;

@interface VoxeetSDK (SWIFT_EXTENSION(VoxeetSDK))
- (void)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
- (void)application:(UIApplication * _Nonnull)application didRegister:(UIUserNotificationSettings * _Nonnull)notificationSettings;
/// Usefull bellow iOS 10.
- (void)application:(UIApplication * _Nonnull)application didReceive:(UILocalNotification * _Nonnull)notification;
/// Usefull bellow iOS 10.
- (void)application:(UIApplication * _Nonnull)application handleActionWithIdentifier:(NSString * _Nullable)identifier for:(UILocalNotification * _Nonnull)notification completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end


@interface VoxeetSDK (SWIFT_EXTENSION(VoxeetSDK))
/// Initializing the Voxeet SDK (this method doesn’t automatically open the session).
/// \param consumerKey To get a consumer key, you need to contact Voxeet in order to use the Voxeet SDK.
///
/// \param consumerSecret To get a consumer secret, you need to contact Voxeet in order to use the Voxeet SDK.
///
/// \param userInfo With this dictionary, you can pass additional information. For example you can add any data you want to initialize a user: <code>["externalId": "1234", "externalName": "User", "externalPhotoUrl": "http://voxeet.com/voxeet-logo.jpg", ...]</code>.
///
- (void)initializeSDKWithConsumerKey:(NSString * _Nonnull)consumerKey consumerSecret:(NSString * _Nonnull)consumerSecret userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo;
/// Initializing the Voxeet SDK.
/// \param consumerKey To get a consumer key, you need to contact Voxeet in order to use the Voxeet SDK.
///
/// \param consumerSecret To get a consumer secret, you need to contact Voxeet in order to use the Voxeet SDK.
///
/// \param userInfo With this dictionary, you can pass additional information. For example you can add any data you want to initialize a user: <code>["externalId": "1234", "externalName": "User", "externalPhotoUrl": "http://voxeet.com/voxeet-logo.jpg", ...]</code>.
///
/// \param automaticallyOpenSession If you want to manage your user IDs, set automaticallyOpenSession to false. If true, the SDK will automatically manage your user (anonymous identify).
///
- (void)initializeSDKWithConsumerKey:(NSString * _Nonnull)consumerKey consumerSecret:(NSString * _Nonnull)consumerSecret userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo automaticallyOpenSession:(BOOL)automaticallyOpenSession;
/// Initializing the Voxeet SDK.
/// \param consumerKey To get a consumer key, you need to contact Voxeet in order to use the Voxeet SDK.
///
/// \param consumerSecret To get a consumer secret, you need to contact Voxeet in order to use the Voxeet SDK.
///
/// \param externalID Use this parameter if you want to use your own user ID.
///
/// \param name Use this parameter if you want to use a display name to your own user.
///
/// \param avatarURL Use this parameter if you want to use an avatar to your own user.
///
- (void)initializeSDKWithConsumerKey:(NSString * _Nonnull)consumerKey consumerSecret:(NSString * _Nonnull)consumerSecret externalID:(NSString * _Nonnull)externalID name:(NSString * _Nullable)name avatarURL:(NSString * _Nullable)avatarURL SWIFT_DEPRECATED_MSG("Instead of passing externalID, name and avatarURL as parameters, you need to pass them through the userInfo dictionary.");
@end

#pragma clang diagnostic pop
